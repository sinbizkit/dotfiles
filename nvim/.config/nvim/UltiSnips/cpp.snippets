snippet sinc "include system header file"
#include <$1>
endsnippet

snippet inc "include header file"
#include "$1"
endsnippet

snippet pinc "include precompiled header file"
#include "stdafx.h"
endsnippet

snippet scast "static cast"
static_cast<$1>($2)$3
endsnippet

snippet dcast "dynamic cast"
dynamic_cast<$1>($2)$3
endsnippet

snippet rcast "reinterpret cast"
reinterpret_cast<$1>($2)$3
endsnippet

snippet map "std::map"
std::map<${1:key}, ${2:value}> ${3};
endsnippet

snippet vector "std::vector"
std::vector<${1:char}> ${2};
endsnippet

snippet ns "insert namespace"
namespace ${1:`!v expand('%:t:r')`}
{
$2
} // namespace $1
endsnippet

snippet ans "insert anonymous namespace"
namespace
{

$1

} // anonymous namespace
endsnippet

snippet cl "class"
class ${1:`!v expand('%:t:r')`} ${2:: public ParentClass}
{
public:
	$1(${3});
	${4:virtual }~$1();
};
endsnippet

snippet encl "enum class"
enum class ${1:ClassName}
{
	${2:/* data */}
};
endsnippet

snippet struct "struct"
struct ${1:StrucName}
{
	${2:/* data */}
};
endsnippet

snippet for "for loop"
for (int ${1:i} = 0; $1 < $2; ++$1)
{
	${3:/* data */}
}
endsnippet

snippet foi "iterator loop"
for (auto it = $1.begin(); it != $1.end(); ++it)
{
	${2:/* data */}
}
endsnippet

snippet foe "for each loop"
for (const ${3:auto&} ${1:value} : ${2:container})
{
	${4:/* data */}
}
endsnippet

snippet sw "switch statement"
switch ($1)
{
case $2:
	$3;
	break;
default:
	break;
}
endsnippet


snippet ctor "constructor snippet"
${1:`!v expand('%:t:r')`}::$1()
{
}
endsnippet

snippet dctor "default constructor snippet"
${1:`!v expand('%:t:r')`}::$1() = default;
endsnippet

snippet dtor "destructor snippet"
${1:`!v expand('%:t:r')`}::~$1()
{
}
endsnippet

snippet ddtor "default destructor snippet"
${1:`!v expand('%:t:r')`}::~$1() = default;
endsnippet

snippet fun "free function implementation"
${4:void} ${2:function}
{
}
endsnippet

snippet mfun "member function implementation"
${5:void} ${1:`!v expand('%:t:r')`}::${2:memberFunction}
{
}
endsnippet

snippet tmfun "template member function implementation"
template<${1:typename T}>
${7:void} ${2:`!v expand('%:t:r')`}<${3:T}>::${4:memberFunction}(${5})${6}
{
}

endsnippet

snippet null "null autocompletion"
nullptr
endsnippet

snippet li "file information"
//
//  File: `!p snip.rv = fn`
//  Created by Ivan Berdnikov on `date +%d/%m/%y`
//

$1
endsnippet

snippet if "if condition"
if (${1:/* condition */})
{
	${2:/* data */}
}
endsnippet

snippet ifs "if condition (short)"
if (${1:/* condition */})
	${2:/* data */}
endsnippet

snippet ifn "if-not condition"
if (!${1:/* condition */})
{
	${2:/* data */}
}
endsnippet

snippet ifns "if-not condition (short)"
if (!${1:/* condition */})
	${2:/* data */}
endsnippet

snippet test "google test snippet"
TEST(${1:`!v expand('%:t:r')`}, $2)
{
	$3
}
endsnippet

snippet testf "google test snippet with fixture"
TEST_F(${1:`!v expand('%:t:r')`}, $2)
{
	$3
}
endsnippet

snippet ex "google test EXPECT harmcrest snippet"
EXPECT_THAT($1, $2);
endsnippet

snippet cmh "section header"
////////////////////////////////////////////////////////////////////////////////
// ${1}
////////////////////////////////////////////////////////////////////////////////
endsnippet

snippet cmhs "comment short header"
/////////////////////////////////
// ${1}
/////////////////////////////////
endsnippet

snippet cmf "comment footer"
////////////////////////////////////////////////////////////////////////////////
endsnippet

snippet cmfs "comment short footer"
/////////////////////////////////
endsnippet

snippet cms "comment separator"
////////////////////////////////////////////////////////////////////////////////
endsnippet

snippet todo "TODO snippet"
// TODO(SiN_Bizkit: `date +%d/%m/%y`): $1
endsnippet

snippet fixme "FIXME snippet"
// FIXME(SiN_Bizkit: `date +%d/%m/%y`): $1
endsnippet

snippet note "NOTE snippet"
// NOTE: $1
endsnippet

snippet once "pragma once snippet"
#pragma once
$1
endsnippet

snippet gonce "Include guard"
#ifndef ${1:`!v toupper(expand('%:t:r').'_H_')`}
#define $1

${2}

#endif  // $1
endsnippet

snippet cfe "Enable clang-format comment."
// clang-format on
endsnippet

snippet cfd "Disable clang-format comment."
// clang-format off
endsnippet

